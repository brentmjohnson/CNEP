- hosts: vm_host
  vars_files:
    - vars/k8s_cluster.yml
  tasks:
    - name: Deploy Hyper-V Resources
      community.general.terraform:
        project_path: "{{ workspace_directory.base_path }}/clusters/{{ k8s.cluster_name }}/controls"
        force_init: true
        state: present
        variables:
          state: "Off"
      when: hostvars.localhost.nodes_ready|default(false) != true
    #   register: out
    # - debug: var=out

- hosts: hyperv_host
  vars_files:
  - vars/k8s_cluster.yml
  tasks:
    # - name: Configure Hyper-V NAT
    #   ansible.windows.win_powershell:
    #     script: |
    #       $ifIndex = (Get-NetAdapter -Name "vEthernet (k8s)").ifIndex
    #       Remove-NetIPAddress -InterfaceAlias "vEthernet (k8s)" -Confirm:$false
    #       New-NetIPAddress -AddressFamily IPv4 -IPAddress 10.0.0.1 -PrefixLength 24 -InterfaceIndex $ifIndex
    #       New-NetIPAddress -AddressFamily IPv6 -IPAddress fd11::10:0:0:1 -PrefixLength 118 -InterfaceIndex $ifIndex
    #       Remove-NetNat -Name k8s-* -Confirm:$false
    #       New-NetNat -Name k8s-IPv4 -InternalIPInterfaceAddressPrefix 10.0.0.0/24
    #       New-NetNat -Name k8s-IPv6 -InternalIPInterfaceAddressPrefix fd11::10:0:0:0/118
    #       Set-NetIPInterface -ifAlias "vEthernet (WSL)" -Forwarding Enabled
    #       Set-NetIPInterface -ifAlias "vEthernet (k8s)" -Forwarding Enabled
    #       Get-NetIPInterface | select ifIndex,InterfaceAlias,AddressFamily,ConnectionState,Forwarding | Sort-Object -Property IfIndex | Format-Table
    #   when: hostvars.localhost.nodes_ready|default(false) != true
    #   register: out
    # - debug: var=out
    - name: Reorder VM Boot Devices
      ansible.windows.win_powershell:
        script: |
          $bootOrder = (Get-VMFirmware k8s-control-0).BootOrder
          $bootOrder = @() + ($bootOrder | where {$_.BootType -eq "File"}) + ($bootOrder | where {$_.Device.ControllerLocation -ne $null} | Sort-Object -Property {$_.Device.ControllerLocation }) + ($bootOrder | where {$_.BootType -eq "Network"})
          Set-VMFirmware k8s-control-0 -BootOrder $bootOrder

          $bootOrder = (Get-VMFirmware k8s-control-1).BootOrder
          $bootOrder = @() + ($bootOrder | where {$_.BootType -eq "File"}) + ($bootOrder | where {$_.Device.ControllerLocation -ne $null} | Sort-Object -Property {$_.Device.ControllerLocation }) + ($bootOrder | where {$_.BootType -eq "Network"})
          Set-VMFirmware k8s-control-1 -BootOrder $bootOrder

          $bootOrder = (Get-VMFirmware k8s-control-2).BootOrder
          $bootOrder = @() + ($bootOrder | where {$_.BootType -eq "File"}) + ($bootOrder | where {$_.Device.ControllerLocation -ne $null} | Sort-Object -Property {$_.Device.ControllerLocation }) + ($bootOrder | where {$_.BootType -eq "Network"})
          Set-VMFirmware k8s-control-2 -BootOrder $bootOrder
      # when: hostvars.localhost.nodes_ready|default(false) != true
    #   register: out
    # - debug: var=out

    - name: Attach GPUPartitionAdapters
      ansible.windows.win_powershell:
        script: |
          $vmName = "{{ k8s.cluster_name }}-control-{{ item }}"
          $gpuName = "AMD Radeon RX 6900 XT"

          $PartitionableGPUList = Get-WmiObject -Class "Msvm_PartitionableGpu" -ComputerName $env:COMPUTERNAME -Namespace "ROOT\virtualization\v2" 
          $DeviceID = ((Get-WmiObject Win32_PNPSignedDriver | where {($_.Devicename -eq "$gpuName")}).hardwareid).split('\')[1]
          $path = ($PartitionableGPUList | Where-Object name -like "*$deviceid*").Name

          # Configure GPU for VM
          Add-VMGpuPartitionAdapter $vmName -InstancePath "$path"
          # Set-VM -GuestControlledCacheTypes $true -VMName $vmName
          # Set-VM -LowMemoryMappedIoSpace 3Gb -VMName $vmName
          # Set-VM -HighMemoryMappedIoSpace 33280Mb -VMName $vmName
      loop: "{{ range(0, k8s.control_plane.vms) | list }}"
      when: hostvars.localhost.nodes_ready|default(false) != true
      register: out
    # - debug: var=out

#     - name: Start Hyper-V VM Installs
#       ansible.windows.win_powershell:
#         script: |
#           Start-VM k8s-control-0;
#           Start-Sleep -Seconds 0;

#           Start-VM k8s-control-1;
#           Start-Sleep -Seconds 0;

#           Start-VM k8s-control-2;

#           Start-VM k8s-lb;
#       when: hostvars.localhost.nodes_ready|default(false) != true
#     #   register: out
#     # - debug: var=out

# - hosts: hyperv_host
#   tasks:
#     - name: Waiting for Install Completion
#       ansible.windows.win_powershell:
#         script: |
#           while((Get-VM | Sort-Object  -Property State)[0].State -ne "Off") {
#             echo "Waiting...";
#             Start-Sleep -Seconds 5;
#           }
#       when: hostvars.localhost.nodes_ready|default(false) != true
#     #   register: out
#     # - debug: var=out
#     - name: Reorder VM Boot Devices
#       ansible.windows.win_powershell:
#         script: |
#           $bootOrder = (Get-VMFirmware k8s-control-0).BootOrder
#           $bootOrder = $bootOrder[1,3,4,5,0,2,6]
#           Set-VMFirmware k8s-control-0 -BootOrder $bootOrder

#           $bootOrder = (Get-VMFirmware k8s-control-1).BootOrder
#           $bootOrder = $bootOrder[1,3,4,5,0,2,6]
#           Set-VMFirmware k8s-control-1 -BootOrder $bootOrder

#           $bootOrder = (Get-VMFirmware k8s-control-2).BootOrder
#           $bootOrder = $bootOrder[1,3,4,5,0,2,6]
#           Set-VMFirmware k8s-control-2 -BootOrder $bootOrder

#           $bootOrder = (Get-VMFirmware k8s-lb).BootOrder
#           $bootOrder = $bootOrder[2,0,1,3]
#           Set-VMFirmware k8s-lb -BootOrder $bootOrder
#       when: hostvars.localhost.nodes_ready|default(false) != true
#       register: out
#     - debug: var=out

    - community.windows.win_lineinfile:
        path: C:\Users\<user>\.ssh\known_hosts
        regex: "^{{ item }} "
        state: absent
      loop: "{{ query('inventory_hostnames', 'all:!hyperv_host') }}"

- hosts: vm_host
  vars_files:
    - vars/k8s_cluster.yml
  tasks:
    - name: Start Hyper-V VMs
      community.general.terraform:
        project_path: "{{ workspace_directory.base_path }}/clusters/{{ k8s.cluster_name }}/controls"
        force_init: true
        state: present
    #   register: out
    # - debug: var=out

    - name: Ensure to clean known_hosts
      ansible.builtin.known_hosts:
        hash_host: yes
        host: "{{ item }}"
        path: ~/.ssh/known_hosts
        state: absent
      loop: "{{ query('inventory_hostnames', 'all:!vm_host') }}"
      delegate_to: localhost

