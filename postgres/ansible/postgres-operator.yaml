- name: Install postgres operator
  hosts: vm_host
  run_once: true
  vars_files:
    - "{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/vars/k8s_cluster.yml"
  tasks:
    - name: Apply postgres-namespace manifests to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../kustomize/postgres-operator/base/postgres-namespace.yaml"
        kubeconfig: "{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig"
        # apply: yes
        # server_side_apply:
        #   field_manager: ansible
        wait: true

    - name: Apply postgres-bucket manifests to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../kustomize/postgres-operator/base/postgres-bucket.yaml"
        kubeconfig: "{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig"
        # apply: yes
        # server_side_apply:
        #   field_manager: ansible
        wait: true
    
    - name: Get the postgres-bucket configmap info
      kubernetes.core.k8s_info:
        kind: ConfigMap
        wait: yes
        name: postgres-bucket
        namespace: postgres
        # wait_timeout: 240
      register: bucket_configmap_data
    # - debug: var=bucket_configmap_data.resources[0].data
    
    - name: Get the postgres-bucket secret info
      kubernetes.core.k8s_info:
        kind: Secret
        wait: yes
        name: postgres-bucket
        namespace: postgres
        # wait_timeout: 240
      register: bucket_secret_data
    # - debug: var=bucket_secret_data.resources[0].data
  
    - ansible.builtin.set_fact:
        postgres_bucket: "{{ {} |
          combine(bucket_configmap_data.resources[0].data) |
          combine(dict(secret_keys | zip(decoded_secret_values))) 
          }}"
      vars:
        secret_keys: "{{ bucket_secret_data.resources[0].data.keys() | list }}"
        secret_values: "{{ bucket_secret_data.resources[0].data.values() | list }}"
        decoded_secret_values: "{{ secret_values | map('b64decode') | list }}"
    # - debug: var=postgres_bucket

    - name: Apply bucket policy
      ansible.builtin.shell:
        cmd: |
          kubectl run -it -n postgres --rm s3cmd --image=alpine --restart=Never -- sh -c '
          apk add s3cmd -q --no-progress
          cat > /tmp/iam-policy.json << EOF
          {"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"AWS":["arn:aws:iam:::user/obc-postgres-postgres-bucket","arn:aws:iam:::user/ceph-bucket-admin-user"]},"Action":["s3:*"],"Resource":["arn:aws:s3:::*"]}]}
          EOF
          s3cmd setpolicy \
          ./tmp/iam-policy.json \
          s3://{{ postgres_bucket.BUCKET_NAME }} \
          --host={{ postgres_bucket.BUCKET_HOST }}.cluster.local \
          --host-bucket={{ postgres_bucket.BUCKET_HOST }}.cluster.local \
          --no-ssl \
          --access_key={{ postgres_bucket.AWS_ACCESS_KEY_ID }} \
          --secret_key={{ postgres_bucket.AWS_SECRET_ACCESS_KEY }}'
      register: myoutput
    # - debug: var=myoutput

    - name: Add postgres-operator chart repo
      kubernetes.core.helm_repository:
        name: postgres-operator-charts
        repo_url: "https://opensource.zalando.com/postgres-operator/charts/postgres-operator"

    - name: Separately update the postgres-operator cache
      kubernetes.core.helm:
        release_state: absent
        chart_ref: postgres-operator-charts
        update_repo_cache: yes
        release_name: undefined
        release_namespace: undefined

    - name: Helm template postgres-operator chart
      ansible.builtin.shell:
        cmd: helm template
          --version=1.9.0
          --namespace=postgres
          --include-crds=true
          --values={{ playbook_dir }}/../helm/values/postgres-operator-values.yaml
          --output-dir={{ playbook_dir }}/../kustomize/postgres-operator/base
          postgres-operator postgres-operator-charts/postgres-operator

    - name: Add postgres-operator resources to kustomization file
      ansible.builtin.shell:
        cmd: kustomize edit add resource ./base/postgres-operator/**/*.yaml
        chdir: "{{ playbook_dir }}/../kustomize/postgres-operator/"

    - name: Setting kustomize postgres base templates
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ playbook_dir }}/../kustomize/postgres-operator/base/{{ item | basename | regex_replace('\\.j2$', '') }}"
        mode: "0644"
      with_fileglob:
        - "{{ playbook_dir }}/../kustomize/postgres-operator/base/templates/*.j2"
    
    - name: Kustomize build postgres-operator manifests.
      ansible.builtin.shell:
        cmd: kustomize build
        chdir: "{{ playbook_dir }}/../kustomize/postgres-operator/"
      register: myoutput
    # - debug: var=myoutput.stdout

    - name: Kustomize copy postgres-operator resources.
      ansible.builtin.copy :
        content: "{{ myoutput.stdout }}"
        dest: "{{ playbook_dir }}/../kustomize/postgres-operator/resources/resources.yaml"
        mode: "0644"

    - name: kubectl apply crds first
      ansible.builtin.shell:
        cmd: "kubectl apply --server-side -f {{ playbook_dir }}/../kustomize/postgres-operator/base/postgres-operator/crds"

    - name: Apply postgres-operator manifests to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../kustomize/postgres-operator/resources/resources.yaml"
        kubeconfig: "{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig"
        # apply: yes
        # server_side_apply:
        #   field_manager: ansible
        # wait: true

    - name: Wait for the postgres-operator deployment
      kubernetes.core.k8s_info:
        kind: Deployment
        wait: yes
        name: postgres-operator
        namespace: postgres
      register: myoutput

