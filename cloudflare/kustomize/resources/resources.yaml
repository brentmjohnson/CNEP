apiVersion: v1
kind: Namespace
metadata:
  name: cloudflared
---
apiVersion: v1
data:
  config.yaml: |-
    # Name of the tunnel you want to run
    # tunnel: example-tunnel
    credentials-file: /etc/cloudflared/creds/credentials.json
    # Serves the metrics server under /metrics and the readiness server under /ready
    metrics: 0.0.0.0:2000
    # Autoupdates applied in a k8s pod will be lost when the pod is removed or restarted, so
    # autoupdate doesn't make sense in Kubernetes. However, outside of Kubernetes, we strongly
    # recommend using autoupdate.
    no-autoupdate: true
    # The `ingress` block tells cloudflared which local service to route incoming
    # requests to. For more about ingress rules, see
    # https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/configuration/ingress
    #
    # Remember, these rules route traffic from cloudflared to a local service. To route traffic
    # from the internet to cloudflared, run `cloudflared tunnel route dns <tunnel> <hostname>`.
    # E.g. `cloudflared tunnel route dns example-tunnel tunnel.example.com`.
    # ingress:
    # The first rule proxies traffic to the httpbin sample Service defined in app.yaml
    # - hostname: tunnel.example.com
    #   service: http://web-service:80
    # This rule sends traffic to the built-in hello-world HTTP server. This can help debug connectivity
    # issues. If hello.example.com resolves and tunnel.example.com does not, then the problem is
    # in the connection from cloudflared to your local service, not from the internet to cloudflared.
    # - hostname: hello.example.com
    #   service: hello_world
    # This rule matches any traffic which didn't match a previous rule, and responds with HTTP 404.
    # - service: http_status:404
kind: ConfigMap
metadata:
  name: cloudflared
  namespace: cloudflared
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: cloudflared
  namespace: cloudflared
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cloudflared
  template:
    metadata:
      labels:
        app: cloudflared
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                app: cloudflared
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - tunnel
        - --config
        - /etc/cloudflared/config/config.yaml
        - run
        - example
        image: cloudflare/cloudflared:2023.3.1
        livenessProbe:
          failureThreshold: 1
          httpGet:
            path: /ready
            port: 2000
          initialDelaySeconds: 10
          periodSeconds: 10
        name: cloudflared
        volumeMounts:
        - mountPath: /etc/cloudflared/config
          name: config
          readOnly: true
        - mountPath: /etc/cloudflared/creds
          name: creds
          readOnly: true
      volumes:
      - name: creds
        secret:
          secretName: tunnel-credentials
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: cloudflared
        name: config