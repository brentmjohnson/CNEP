# dhcpd.conf
#
# Sample configuration file for ISC dhcpd
#

# option definitions common to all supported networks...
#option domain-name "internal.example.com";
#option domain-name-servers 127.0.0.1;

#default-lease-time 600;
#max-lease-time 7200;

# Use this to enble / disable dynamic dns updates globally.
#ddns-update-style none;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;
ddns-updates on;
ddns-update-style standard;
ddns-dual-stack-mixed-mode true;
update-conflict-detection true;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

include "/etc/dhcp/rndc-keys/rndc.key";

zone internal.example.com. {
  primary 127.0.0.1;
  key ns-internal-example-com-rndc-key;
}

zone 0.0.10.in-addr.arpa. {
  primary 127.0.0.1;
  key ns-internal-example-com-rndc-key;
}

# No service will be given on this subnet, but declaring it helps the
# DHCP server to understand the network topology.

#subnet 10.152.187.0 netmask 255.255.255.0 {
#}

# This is a very basic subnet declaration.

#subnet 10.254.239.0 netmask 255.255.255.224 {
#  range 10.254.239.10 10.254.239.20;
#  option routers rtr-239-0-1.internal.example.com, rtr-239-0-2.internal.example.com;
#}

subnet 10.0.0.0 netmask 255.255.255.0 {
  update-static-leases on;

  option routers 10.0.0.1;
  option domain-name-servers 10.0.0.2;
  option domain-name "internal.example.com";

  ddns-rev-domainname "in-addr.arpa.";
  ddns-domainname "internal.example.com.";

  class "k8s-lb" { match if (option host-name = "k8s-lb"); }
  class "k8s-control-0" { match if (option host-name = "k8s-control-0"); }
  class "k8s-control-1" { match if (option host-name = "k8s-control-1"); }
  class "k8s-control-2" { match if (option host-name = "k8s-control-2"); }

  pool { allow members of "k8s-lb"; range 10.0.0.2 10.0.0.2; }
  pool { allow members of "k8s-control-0"; range 10.0.0.3 10.0.0.3; }
  pool { allow members of "k8s-control-1"; range 10.0.0.4 10.0.0.4; }
  pool { allow members of "k8s-control-2"; range 10.0.0.5 10.0.0.5; }
}

# This declaration allows BOOTP clients to get dynamic addresses,
# which we don't really recommend.

#subnet 10.254.239.32 netmask 255.255.255.224 {
#  range dynamic-bootp 10.254.239.40 10.254.239.60;
#  option broadcast-address 10.254.239.31;
#  option routers rtr-239-32-1.internal.example.com;
#}

# A slightly different configuration for an internal subnet.
#subnet 10.5.5.0 netmask 255.255.255.224 {
#  range 10.5.5.26 10.5.5.30;
#  option domain-name-servers ns1.internal.example.com;
#  option domain-name "internal.example.com";
#  option routers 10.5.5.1;
#  option broadcast-address 10.5.5.31;
#  default-lease-time 600;
#  max-lease-time 7200;
#}

# Hosts which require special configuration options can be listed in
# host statements.   If no address is specified, the address will be
# allocated dynamically (if possible), but the host-specific information
# will still come from the host declaration.

#host passacaglia {
#  hardware ethernet 0:0:c0:5d:bd:95;
#  filename "vmunix.passacaglia";
#  server-name "toccata.internal.example.com";
#}

# Fixed IP addresses can also be specified for hosts.   These addresses
# should not also be listed as being available for dynamic assignment.
# Hosts for which fixed IP addresses have been specified can boot using
# BOOTP or DHCP.   Hosts for which no fixed address is specified can only
# be booted with DHCP, unless there is an address range on the subnet
# to which a BOOTP client is connected which has the dynamic-bootp flag
# set.
#host fantasia {
#  hardware ethernet 08:00:07:26:c0:a5;
#  fixed-address fantasia.internal.example.com;
#}

#host k8s_lb {
#  hardware ethernet 00:00:10:00:00:02;
#  fixed-address 10.0.0.2;
#  option host-name "k8s-lb";
#  option domain-name "internal.example.com";
#}

#host k8s_control_0 {
#  hardware ethernet 00:00:10:00:00:03;
#  fixed-address 10.0.0.3;
#  option host-name "k8s-control-0";
#  option domain-name "internal.example.com";
#}

#host k8s_control_1 {
#  hardware ethernet 00:00:10:00:00:04;
#  fixed-address 10.0.0.4;
#  option host-name "k8s-control-1";
#  option domain-name "internal.example.com";
#}

#host k8s_control_2 {
#  hardware ethernet 00:00:10:00:00:05;
#  fixed-address 10.0.0.5;
#  option host-name "k8s-control-2";
#  option domain-name "internal.example.com";
#}

# You can declare a class of clients and then do address allocation
# based on that.   The example below shows a case where all clients
# in a certain class get addresses on the 10.17.224/24 subnet, and all
# other clients get addresses on the 10.0.29/24 subnet.

#class "foo" {
#  match if substring (option vendor-class-identifier, 0, 4) = "SUNW";
#}

#class "k8s-lb" { match if (option host-name = "k8s-lb"); }
#class "k8s-control-0" { match if (option host-name = "k8s-control-0"); }
#class "k8s-control-1" { match if (option host-name = "k8s-control-1"); }
#class "k8s-control-2" { match if (option host-name = "k8s-control-2"); }

#subnet 10.0.0.0 netmask 255.255.255.0 {
#  option routers 10.0.0.1;
#  pool { allow members of "k8s-lb"; range 10.0.0.2 10.0.0.2; }
#  pool { allow members of "k8s-control-0"; range 10.0.0.3 10.0.0.3; }
#  pool { allow members of "k8s-control-1"; range 10.0.0.4 10.0.0.4; }
#  pool { allow members of "k8s-control-2"; range 10.0.0.5 10.0.0.5; }
#}

#shared-network 224-29 {
#  subnet 10.17.224.0 netmask 255.255.255.0 {
#    option routers rtr-224.internal.example.com;
#  }
#  subnet 10.0.29.0 netmask 255.255.255.0 {
#    option routers rtr-29.internal.example.com;
#  }
#  pool {
#    allow members of "foo";
#    range 10.17.224.10 10.17.224.250;
#  }
#  pool {
#    deny members of "foo";
#    range 10.0.29.10 10.0.29.230;
#  }
#}
