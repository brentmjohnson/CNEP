---
- name: Install Hashicorp Vault
  hosts: vm_host
  run_once: true
  vars_files:
    - "{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/vars/k8s_cluster.yml"
  tasks:
    - name: Add hashicorp chart repo
      kubernetes.core.helm_repository:
        name: hashicorp
        repo_url: "https://helm.releases.hashicorp.com"

    - name: Separately update the hashicorp cache
      kubernetes.core.helm:
        release_state: absent
        chart_ref: hashicorp
        update_repo_cache: yes
        release_name: undefined
        release_namespace: undefined

    - name: Helm template vault chart
      kubernetes.core.helm_template:
        chart_ref: hashicorp/vault
        chart_version: "0.23.0"
        # release_name: vault
        release_namespace: vault
        values_files:
          - "{{ playbook_dir }}/../helm/values/vault-values.yaml"
        include_crds: yes
        output_dir: "{{ playbook_dir }}/../kustomize/base"

    - name: Add vault resources to kustomization file
      ansible.builtin.shell:
        cmd: kustomize edit add resource ./base/vault/templates/*.yaml
        chdir: "{{ playbook_dir }}/../kustomize/"

    - name: Kustomize build vault manifests.
      ansible.builtin.shell:
        cmd: kustomize build
        chdir: "{{ playbook_dir }}/../kustomize/"
      register: myoutput
    # - debug: var=myoutput.stdout

    - name: Kustomize copy vault resources.
      ansible.builtin.copy :
        content: "{{ myoutput.stdout }}"
        dest: "{{ playbook_dir }}/../kustomize/resources/resources.yaml"
        mode: "0644"

    - name: Apply vault manifests to the cluster
      kubernetes.core.k8s:
        state: present
        src: "{{ playbook_dir }}/../kustomize/resources/resources.yaml"
        kubeconfig: "{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig"
        # apply: yes
        # server_side_apply:
        #   field_manager: ansible
        # wait: true

    - name: Wait for vault
      ansible.builtin.shell: 
        cmd: | 
          while ! \
            kubectl -n vault exec vault-0 \
            --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
            -- vault version;
          do sleep 1;
          done
    #   register: myoutput
    # - debug: var=myoutput

    - name: Check for vault status
      ansible.builtin.shell: 
        cmd: | 
          kubectl -n vault exec vault-0 \
          --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
          -- vault status -format=json;
      register: myoutput
      failed_when: myoutput.rc not in [ 0, 2 ]
    # - debug: var=myoutput

    - ansible.builtin.set_fact:
        vault_initialized: "{{myoutput.stdout|from_json|json_query('initialized')}}"
    # - debug: var=vault_initialized

    - name: Perform vault initialization
      block:
        - name: Initialize first leader
          block:
            - name: Check for vault status
              ansible.builtin.shell: 
                cmd: | 
                  kubectl -n vault exec vault-0 \
                  --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
                  -- vault operator init -key-shares=1 -key-threshold=1 -format=json;
              register: myoutput
            # - debug: var=myoutput

            - ansible.builtin.set_fact:
                vault_unseal_keys_b64: "{{myoutput.stdout|from_json|json_query('unseal_keys_b64')}}"
            # - debug: var=vault_unseal_keys_b64

            - ansible.builtin.set_fact:
                vault_root_token: "{{myoutput.stdout|from_json|json_query('root_token')}}"
            # - debug: var=vault_root_token

            - name: Kustomize copy rook-ceph-cluster resources.
              ansible.builtin.copy :
                content: "{{ myoutput.stdout|from_json }}"
                dest: "{{ playbook_dir }}/../cluster-keys.json"
                mode: "0644"

            - name: Add controls to given group
              ansible.builtin.shell: 
                cmd: | 
                  kubectl -n vault exec vault-0 \
                  --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
                  -- vault operator unseal {{ vault_unseal_keys_b64[0] }} ;
              register: myoutput
            # - debug: var=myoutput

        - name: Join vault raft
          include_tasks: "{{ playbook_dir }}/vault-join-tasks.yaml"
          loop: "{{ range(1, 3) | list }}"

        - name: Unseal vault raft
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-{{ item }} \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- vault operator unseal {{ vault_unseal_keys_b64[0] }} ;
          register: myoutput
        # - debug: var=myoutput
          loop: "{{ range(0, 3) | list }}"

        # - name: Load cluster-keys from file
        #   shell: cat {{ playbook_dir }}/../cluster-keys.json
        #   register: myoutput
        
        - name: Configure PKI secrets engine
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault secrets enable pki"
          register: myoutput
        # - debug: var=myoutput

        - name: Configure PKI max lease time-to-live (TTL) to 8760h
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault secrets tune -max-lease-ttl=8760h pki"
          register: myoutput
        # - debug: var=myoutput

        - name: Create CA cert
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write -field=certificate pki/root/generate/internal common_name='svc' ttl=8760h"
          register: myoutput
        # - debug: var=myoutput

        - ansible.builtin.set_fact:
            vault_ca_cert: "{{ myoutput.stdout }}"
        # - debug: var=vault_ca_cert

        - name: Kustomize copy rook-ceph-cluster resources.
          ansible.builtin.copy :
            content: "{{ myoutput.stdout }}"
            dest: "{{ playbook_dir }}/../CA_cert.crt"
            mode: "0644"

        - name: Configure the CA and CRL URLs
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write pki/config/urls issuing_certificates='http://vault-active.vault.svc.cluster.local:8200/v1/pki/ca' \
                    crl_distribution_points='http://vault-active.vault.svc.cluster.local:8200/v1/pki/crl'"
          register: myoutput
        # - debug: var=myoutput

        - name: Enable the pki secrets engine at the pki_int path
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault secrets enable -path=pki_int pki"
          register: myoutput
        # - debug: var=myoutput

        - name: Enable the pki secrets engine at the pki_int path
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault secrets tune -max-lease-ttl=4380h pki_int"
          register: myoutput
        # - debug: var=myoutput

        - name: Generate the intermediate CSR
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write -format=json pki_int/intermediate/generate/internal common_name='svc Intermediate Authority'"
          register: myoutput
        # - debug: var=myoutput

        - ansible.builtin.set_fact:
            vault_int_csr: "{{ myoutput.stdout|from_json|json_query('data.csr') }}"
        # - debug: var=vault_int_csr

        - name: Save the intermediate CSR
          ansible.builtin.copy :
            content: "{{ myoutput.stdout|from_json|json_query('data.csr') }}"
            dest: "{{ playbook_dir }}/../pki_intermediate.csr"
            mode: "0644"

        - name: Sign the intermediate certificate with the root CA private key
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write -format=json pki/root/sign-intermediate csr='{{ vault_int_csr }}' format=pem_bundle ttl='4380h'"
          register: myoutput
        # - debug: var=myoutput

        - ansible.builtin.set_fact:
            vault_int_cert: "{{ myoutput.stdout|from_json|json_query('data.certificate') }}"
        # - debug: var=vault_int_cert

        - name: Save the intermediate cert
          ansible.builtin.copy :
            content: "{{ myoutput.stdout|from_json|json_query('data.certificate') }}"
            dest: "{{ playbook_dir }}/../intermediate.cert.pem"
            mode: "0644"

        - name: Import the signed intermediate certificate
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write pki_int/intermediate/set-signed certificate='{{ vault_int_cert }}'"
          register: myoutput
        # - debug: var=myoutput

        - name: Create a vault role named cluster-dot-local
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write pki_int/roles/cluster-dot-local allowed_domains='svc' allow_subdomains=true max_ttl='505h' require_cn=false allowed_uri_sans='spiffe://cluster.local/*'"
          register: myoutput
        # - debug: var=myoutput

        - name: Enable approle auth method
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault auth enable approle"
          register: myoutput
        # - debug: var=myoutput

        - name: Create a cert-manager policy
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c ' \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault policy write cert-manager -<< EOF
              path "pki_int/sign/cluster-dot-local" {
                capabilities = [ "update" ]
              }
              EOF'
          register: myoutput
        # - debug: var=myoutput

        - name: Create a cert-manager policy
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write auth/approle/role/cert-manager token_policies='cert-manager' token_ttl=1h token_max_ttl=4h"
          register: myoutput
        # - debug: var=myoutput

        - name: Get cert-manager role-id
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault read auth/approle/role/cert-manager/role-id -format=json"
          register: myoutput
        # - debug: var=myoutput

        - ansible.builtin.set_fact:
            vault_cert_manager_role_id: "{{myoutput.stdout|from_json|json_query('data.role_id')}}"
        # - debug: var=vault_cert_manager_role_id

        - name: Get cert-manager secret-id
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault login {{ vault_root_token }} &> /dev/null && \
                  vault write -force auth/approle/role/cert-manager/secret-id -format=json"
          register: myoutput
        # - debug: var=myoutput

        - ansible.builtin.set_fact:
            vault_cert_manager_secret_id: "{{myoutput.stdout|from_json|json_query('data.secret_id')}}"
        # - debug: var=vault_cert_manager_secret_id

        - ansible.builtin.set_fact:
            vault_cert_manager_role_creds:
              cert_manager_role_id: "{{ vault_cert_manager_role_id }}"
              cert_manager_secret_id: "{{ vault_cert_manager_secret_id }}"
        # - debug: var=vault_cert_manager_role_creds

        - name: Copy vault cert-manager role creds
          ansible.builtin.copy :
            content: "{{ vault_cert_manager_role_creds| to_json }}"
            dest: "{{ playbook_dir }}/../cert_manager_role_creds.json"
            mode: "0644"

        - name: Enable the userpass auth method
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault auth enable userpass"
          register: myoutput
        # - debug: var=myoutput

        - name: Include vars of credentials.yaml into the 'credentials' variable
          ansible.builtin.include_vars:
            file: "{{ playbook_dir }}/../../credentials.yaml"
            name: credentials

        - block:
            - name: Generate password and save credentials
              ansible.builtin.copy :
                content: "{{ credentials | combine(updated_credentials, recursive=true) | to_nice_yaml }}"
                dest: "{{ playbook_dir }}/../../credentials.yaml"
                mode: "0644"
              vars:
                updated_credentials:
                  vault:
                    password: "{{ lookup('ansible.builtin.password', '/dev/null') }}"

            - name: Reload credentials
              ansible.builtin.include_vars:
                file: "{{ playbook_dir }}/../../credentials.yaml"
                name: credentials
                # hash_behaviour: merge

          when: "credentials.vault.password is not defined or
            credentials.vault.password == None or
            credentials.vault.password | length == 0"

        - name: Write the vault-admin user
          ansible.builtin.shell: 
            cmd: | 
              kubectl -n vault exec vault-0 \
              --kubeconfig='{{ playbook_dir }}/../../ansible/hyperv-k8s-provisioner/k8s-setup/clusters/{{ k8s.cluster_name }}/admin.kubeconfig' \
              -- sh -c " \
                  vault write auth/userpass/users/{{ credentials.vault.username }} \
                    password={{ credentials.vault.password }} \
                    policies=admins"
          register: myoutput
        # - debug: var=myoutput

      when: vault_initialized == false